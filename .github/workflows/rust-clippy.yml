# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# rust-clippy is a tool that runs a bunch of lints to catch common
# mistakes in your Rust code and help improve your Rust code.
# More details at https://github.com/rust-lang/rust-clippy
# and https://rust-lang.github.io/rust-clippy/

name: rust-clippy analyze

on:
  push:
    branches: [ "main", "*" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main", "*" ]
  schedule:
    - cron: '42 2 * * 1'

jobs:
  rust-clippy-analyze:
    name: Run rust-clippy analyzing
    runs-on: ubuntu-latest

    steps:
      # 1. Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Install GTK4 and its dependencies.
      # This is the most critical step for a gtk4-rs application.
      # It uses apt-get to install the C libraries needed to compile GTK.
      - name: Install GTK dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-4-dev build-essential pkg-config

      # 3. Install the Rust toolchain with rustup.
      # This action also adds `clippy` and `rustfmt` components.
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      # 4. Cache Cargo dependencies to speed up future builds.
      # It caches the cargo registry, git dependencies, and the target/debug directory.
      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install required cargo
        run: cargo install clippy-sarif sarif-fmt

      - name: Run rust-clippy
        run:
          cargo clippy
          --all-features
          --message-format=json | clippy-sarif | tee rust-clippy-results.sarif | sarif-fmt
        continue-on-error: true

      - name: Upload analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: rust-clippy-results.sarif
          wait-for-processing: true
